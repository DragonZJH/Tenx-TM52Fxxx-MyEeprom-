C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TM52F82XX_EEPROM
OBJECT MODULE PLACED IN TM52F82XX_Eeprom.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE TM52F82XX_Eeprom.c OPTIMIZE(9,SIZE) BROWSE INCDIR(.\Drivers) DEBUG OBJEC
                    -TEXTEND TABS(2)

line level    source

   1          /******************************************************************************
   2          
   3            Copyright (C), 2015-2020, xxx Co., Ltd.
   4          
   5           ******************************************************************************
   6            File Name     : TM52F82XX_Eeprom.c
   7            Version       : Initial Draft
   8            Author        : Dragon8814
   9            Created       : 2021/7/6
  10            Last Modified :
  11            Description   : 数据自动分配保存在分配的区域,用户无需修改
  12            Function List :
  13                        EepromRead
  14                        EepromSaveAllData
  15                        EepromSetup
  16                        EepromWrite
  17                        EepromWriteByte
  18                        FindOnWhichArea
  19                        RWEepromEnd
  20                        RWEepromStart
  21            History       :
  22            1.Date        : 2021/7/6
  23              Author      : Dragon8814
  24              Modification: Created file
  25          
  26          ******************************************************************************/
  27          
  28          
  29          
  30          #include "TM52F82XX_Eeprom.h"
  31          
  32          
  33          static void  EepromSaveAllData ( unsigned char writeOnWhichArea,unsigned char saveAllOnThisArea );
  34          
  35          
  36          
  37          volatile struct eepromUser* xdata  EepromUser;
  38          
  39          static void Delay700us()    //@7.3728MHz
  40          {
  41   1        unsigned char i, j;
  42   1      
  43   1        i = 6;
  44   1        j = 1;
  45   1        do
  46   1        {
  47   2          while (--j);
  48   2        } while (--i);
  49   1      }
  50          
  51          
  52          /*****************************************************************************
  53           Prototype    : EepromSetup
  54           Description  : 初始化内存并分配给用户定义接口
C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 2   

  55           Input        : struct eepromUser* ee
  56           Output       : None
  57           Return Value :
  58           Calls        :
  59           Called By    :
  60          
  61            History        :
  62            1.Date         : 2021/7/6
  63              Author       : Dragon8814
  64              Modification : Created function
  65          
  66          *****************************************************************************/
  67          void  EepromSetup ( struct eepromUser* ee )
  68          {
  69   1      
  70   1      
  71   1        EepromUser=ee;
  72   1      
  73   1      }
  74          
  75          
  76          /*****************************************************************************
  77           Prototype    : RWEepromStart
  78           Description  : Eeprom开始写入寄存器操作
  79           Input        : None
  80           Output       : None
  81           Return Value :
  82           Calls        :
  83           Called By    :
  84          
  85            History        :
  86            1.Date         : 2021/7/4
  87              Author       : Dragon8814
  88              Modification : Created function
  89          
  90          *****************************************************************************/
  91          void  RWEepromStart()
  92          {
  93   1        EA = 0;
  94   1        IAPTE_22_MS;
  95   1        IAPWE_SFR=0XE2;    //使能写EEPROM
  96   1      }
  97          
  98          
  99          
 100          /*****************************************************************************
 101           Prototype    : RWEepromEnd
 102           Description  : Eeprom写入结束寄存器操作
 103           Input        : None
 104           Output       : None
 105           Return Value :
 106           Calls        :
 107           Called By    :
 108          
 109            History        :
 110            1.Date         : 2021/7/4
 111              Author       : Dragon8814
 112              Modification : Created function
 113          
 114          *****************************************************************************/
 115          void RWEepromEnd()
 116          {
C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 3   

 117   1        IAPWE_SFR=0x00;    //关闭写EEPROM
 118   1        IAPTE_DISABLE;
 119   1        EA = 1;
 120   1        Delay700us();   
 121   1      }
 122          
 123          /*****************************************************************************
 124           Prototype    : FindOnWhichArea
 125           Description  : 找到当前数据所在区域
 126           Input        : struct findOnArea* foa
 127           Output       : 结构体返回区域0-N或是否所有区域已到达最大写入次数EepromMaxAreaCount
 128           Return Value : 返回区域中的数据保存状态
 129           Calls        :
 130           Called By    :
 131          
 132            History        :
 133            1.Date         : 2021/7/4
 134              Author       : Dragon8814
 135              Modification : Created function
 136          
 137          *****************************************************************************/
 138          void FindOnWhichArea ( struct findOnArea* foa )
 139          {
 140   1        unsigned char area, dat;
 141   1        /*******************真实存放的地址****************************
 142   1        **********(EepromStrogeValue*2*OnArea_N)+(addr*2)**************
 143   1        如存放在区域1中FD_TimeAddr的地址：(15*2*1)+(2*2)=34
 144   1        **************************************************************/
 145   1      #if TestEeprom_==TRUE
 146   1        RWEepromStart();
 147   1        for ( area=0; area<EepromUser->EepromMaxArea; area++ )
 148   1        {
 149   2          dat=* ( EepromUser->EepromOnRamAddress + (EepromUser->EepromStrogeValue*2*area ) ); //区域所在地址
 150   2          EepromUser->EepromTestArea[area]=dat;
 151   2        }
 152   1        RWEepromEnd();
 153   1      #endif
 154   1        RWEepromStart();
 155   1        for ( area=0; area<EepromUser->EepromMaxArea; area++ )
 156   1        {
 157   2          //dat=* ( &EepromAddress+ ((EepromStrogeValue*2*area)+(AreaAddr*2)) );
 158   2          dat=* ( EepromUser->EepromOnRamAddress + ( EepromUser->EepromStrogeValue*2*area ) ); //区域所在地址
 159   2      
 160   2          if ( dat<EepromUser->EepromMaxAreaCount ) //任何一个区域的最大写入次数每超 返回数据
 161   2          {
 162   3            foa->whichhArea=area;
 163   3            foa->AreaCount=dat;
 164   3            RWEepromEnd();
 165   3            return;
 166   3          }
 167   2        }
 168   1        RWEepromEnd();
 169   1      
 170   1        //出错，超出最大区域
 171   1        {
 172   2          foa->whichhArea= EepromUser->OutOfTheArea;
 173   2          return ;
 174   2        }
 175   1      
 176   1      }
 177          
 178          /*****************************************************************************
C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 4   

 179           Prototype    : EepromRead
 180           Description  : Eeprom数据读取
 181           Input        : 读取数据地址
 182           Output       : None
 183           Return Value : 地址对应的数据
 184           Calls        :
 185           Called By    :
 186          
 187            History        :
 188            1.Date         : 2021/7/4
 189              Author       : Dragon8814
 190              Modification : Created function
 191          
 192          *****************************************************************************/
 193          unsigned char EepromRead ( unsigned int addr )
 194          {
 195   1        unsigned char  dat=0;
 196   1        struct findOnArea fOA;
 197   1        FindOnWhichArea ( &fOA );
 198   1        if ( fOA.whichhArea ==EepromUser->OutOfTheArea )
 199   1        {
 200   2          //所有区域都超过最大写入次数 出错
 201   2          //只会出现在芯片第一次运行的时候，因为那时候的EEPROM数据时不确定的
 202   2          //如果第一次运行程序没有进入此处，程序在初始化的时候要做读取错误处理
 203   2          fOA.whichhArea=0;
 204   2          EepromSaveAllData ( fOA.whichhArea,FALSE ); //出错更新区域0
 205   2      
 206   2        }
 207   1      
 208   1        
 209   1        dat=* ( EepromUser->EepromOnRamAddress + ( EepromUser->EepromStrogeValue*2* fOA.whichhArea )+ ( addr*2 ) 
             -) ;
 210   1      
 211   1        return dat;
 212   1      }
 213          
 214          
 215          /*****************************************************************************
 216           Prototype    : EepromReadWithArea
 217           Description  : Eeprom数据根据提供区域读取
 218           Input        : addr:数据地址，area:数据所在区域
 219           Output       : None
 220           Return Value : 区域内地址对应的数据
 221           Calls        :
 222           Called By    :
 223          
 224            History        :
 225            1.Date         : 2021/7/4
 226              Author       : Dragon8814
 227              Modification : Created function
 228          
 229          *****************************************************************************/
 230          unsigned char EepromReadWithArea ( unsigned int addr,unsigned char area )
 231          {
 232   1          unsigned char dat;
 233   1        
 234   1        dat=* ( (EepromUser->EepromOnRamAddress) + ( EepromUser->EepromStrogeValue*2* area )+ ( addr*2 ) ) ;
 235   1        
 236   1        return dat;
 237   1      }
 238          
 239          
C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 5   

 240          
 241          
 242          
 243          /*****************************************************************************
 244           Prototype    : EepromWriteByte
 245           Description  : Eeprom直接写入一个字节 没有明确的写入区域建议不要随意调用
 246           Input        : addr: 写入的数据所在地址
 247                          dat ：写入的数据
 248           Output       : None
 249           Return Value :
 250           Calls        :
 251           Called By    :
 252          
 253            History        :
 254            1.Date         : 2021/7/4
 255              Author       : Dragon8814
 256              Modification : Created function
 257          
 258          *****************************************************************************/
 259          
 260          void EepromWriteByte ( unsigned int  addr,unsigned char  dat )
 261          {
 262   1        unsigned char edat = 0;
 263   1      
 264   1      #if TestEeprom_!=TRUE  //测试时全写
                edat=* (EepromUser->EepromOnRamAddress +addr );
                //edat=EepromAddress[addr];
                if ( edat!=dat )
              #endif
 269   1        {
 270   2        
 271   2          RWEepromStart();
 272   2          *(EepromUser->EepromOnRamAddress+addr)=dat;
 273   2          RWEepromEnd();  
 274   2        }
 275   1      
 276   1      }
 277          
 278          /*****************************************************************************
 279           Prototype    : EepromSaveAllData
 280           Description  : 保存、更新所有数据
 281           Input        : writeOnWhichArea:保存在哪个区域
 282                          isSaveAllOnThisArea:是否保存到当前区域，
 283          
 284           Output       : None
 285           Return Value : None
 286           Calls        :
 287           Called By    :
 288          
 289            History        :
 290            1.Date         : 2021/7/4
 291              Author       : Dragon8814
 292              Modification : Created function
 293          
 294          *****************************************************************************/
 295          static void  EepromSaveAllData ( unsigned char writeOnWhichArea,unsigned char isSaveAllOnThisArea )
 296          {
 297   1        //只在当前区域跟新所有数据忽略
 298   1        if ( isSaveAllOnThisArea!=TRUE )
 299   1        {
 300   2      
 301   2          EepromWriteByte ( EepromUser->EepromStrogeValue*2*writeOnWhichArea,1 ); //当前区写入次数更改为1
C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 6   

 302   2      
 303   2          //上一区写入次数标志为写满 =EepromMaxAreaCount
 304   2          //如果当前区域是第一区0，则上一区为EepromLastArea最后区域
 305   2          EepromWriteByte ( EepromUser->EepromStrogeValue*2* ( writeOnWhichArea!=0?writeOnWhichArea-1:EepromUser->
             -EepromLastArea ), EepromUser->EepromMaxAreaCount );
 306   2      #if TestEeprom_==TRUE
 307   2          EepromUser->EepromTestArea[writeOnWhichArea]=1;
 308   2          EepromUser->EepromTestArea[writeOnWhichArea!=0?writeOnWhichArea-1:EepromUser->EepromLastArea]=EepromUser
             -->EepromMaxAreaCount;
 309   2      #endif
 310   2        }
 311   1        EepromUser->SaveAllDataOnUserHandle ( writeOnWhichArea );
 312   1      
 313   1      }
 314          
 315          
 316          /*****************************************************************************
 317           Prototype    : EepromWrite
 318           Description  : Eeprom写数据操作
 319           Input        : unsigned int  addr 
 320                          unsigned char dat  
 321                          unsigned char isSaveAll 
 322           Output       : None
 323           Return Value :
 324           Calls        :
 325           Called By    :
 326          
 327            History        :
 328            1.Date         : 2021/7/4
 329              Author       : Dragon8814
 330              Modification : Created function
 331          
 332          *****************************************************************************/
 333          void EepromWrite ( unsigned int  addr,unsigned char dat,unsigned char isSaveAll )
 334          {
 335   1        struct findOnArea fOA;
 336   1        unsigned char isN;
 337   1      
 338   1        FindOnWhichArea ( &fOA );
 339   1        if ( fOA.whichhArea<EepromUser->EepromMaxArea )
 340   1        {
 341   2          if ( fOA.AreaCount>EepromUser->EepromMaxAreaCount-2 )
 342   2          {
 343   3            if ( fOA.whichhArea==EepromUser->EepromLastArea ) //最后一个区域已经写满次数了，则转到第一个区域
 344   3            {
 345   4              fOA.whichhArea=0;
 346   4            }
 347   3            else
 348   3            {
 349   4              fOA.whichhArea++;    //不是最后一个区域，则转到下个区域
 350   4            }
 351   3            isN=TRUE; //区域写满 实际写入次数EepromMaxAreaCount-1个 数据更新到下个区域
 352   3          }
 353   2          else
 354   2          {
 355   3            isN=FALSE;//按地址正常写入数据
 356   3          }
 357   2      
 358   2        }
 359   1        else
 360   1        {
 361   2          fOA.whichhArea=0; //出错所有数据更新到区域0
C51 COMPILER V9.56.0.0   TM52F82XX_EEPROM                                                  10/10/2021 11:30:28 PAGE 7   

 362   2          isN=TRUE;
 363   2        }
 364   1      
 365   1        if ( isN==TRUE )  //当前的区域写入新数据条件不满足，需要一并更新所有数据
 366   1        {
 367   2          
 368   2      #if TestEeprom_==TRUE
 369   2          EepromUser->EepromTestWriteCount++;
 370   2      #endif
 371   2               EepromSaveAllData ( fOA.whichhArea,FALSE );
 372   2        }
 373   1        else
 374   1        {
 375   2      #if TestEeprom_==TRUE
 376   2          EepromUser->EepromTestWriteCount++;
 377   2      #endif  
 378   2          //写在当前区域
 379   2          
 380   2          /*************************真实存放的地址*******************
 381   2           *   (EepromStrogeValue*2*OnArea_N)+(addr*2)              *
 382   2           *  如存放在区域1中FD_TimeAddr的地址：(15*2*1)+(2*2)=34              *
 383   2           *  芯片Eeprom起始地址已经增加在写数据函数                                *
 384   2           **********************************************************/
 385   2          
 386   2          EepromWriteByte ( EepromUser->EepromStrogeValue*2*fOA.whichhArea+0*2,++fOA.AreaCount ); //在所在区域写入
             -增加次数
 387   2      
 388   2          if ( isSaveAll ) //在当前区更新所有数据
 389   2          {
 390   3      
 391   3            EepromSaveAllData ( fOA.whichhArea,TRUE );
 392   3          }
 393   2      
 394   2          //在当前区更新个别数据
 395   2          else
 396   2          {
 397   3                   
 398   3            EepromWriteByte ( EepromUser->EepromStrogeValue*2*fOA.whichhArea+addr*2,dat );
 399   3          }
 400   2      
 401   2      
 402   2        }
 403   1      
 404   1      }
 405          
 406          
 407          
 408          
 409          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    670    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
